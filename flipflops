<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>Proxy HTML Viewer - Inject and Intercept Links</title>
<style>
  html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
  }

  .top-bar-wrapper {
      position: relative;
      width: 100%;
      background-color: transparent;
      padding: 10px;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
  }

  .top-bar-container {
      overflow: hidden;
      max-height: 200px;
      transition: max-height 0.3s ease-out, padding 0.3s ease-out, background-color 0.3s ease;
      background-color: #000;
      padding: 10px;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
  }

  .top-bar-container.closed {
      max-height: 0;
      padding: 0 10px;
      overflow: hidden;
      background-color: transparent;
      border-radius: 0;
  }

  .top-bar {
      display: flex;
      align-items: center;
      gap: 10px;
  }

  .top-bar input[type="text"] {
      flex: 1;
      padding: 8px;
      font-size: 14px;
      border-radius: 4px;
      border: none;
  }

  .top-bar button:not(.toggle-bar-button) {
      padding: 8px 12px;
      font-size: 14px;
      background-color: #333;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
  }

  .top-bar button:not(.toggle-bar-button):hover {
      background-color: #555;
  }

  .toggle-bar-button {
      position: absolute;
      top: 100%;
      right: 10px;
      margin-top: 5px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background-color: #000;
      color: white;
      border: 2px solid white;
      font-size: 28px;
      line-height: 1;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: background-color 0.3s ease;
      user-select: none;
      z-index: 2147483647;
      box-shadow: 0 0 10px rgba(0,0,0,0.7);
  }

  .toggle-bar-button:hover {
      background-color: #222;
  }

  #previewFrame {
      width: 100%;
      border: none;
      display: block;
      height: calc(100% - 120px);
      transition: height 0.3s ease;
  }
</style>
</head>
<body>

<div class="top-bar-wrapper">
  <div class="top-bar-container open" id="topBarContainer">
    <div class="top-bar">
        <input type="text" id="urlInput" placeholder="Enter URL or search term" />
        <button onclick="fetchAndInject()">Fetch</button>
        <button onclick="fetchAndOpenNewTab()">Open in New Tab</button>
    </div>
  </div>

  <button class="toggle-bar-button" id="toggleBtn" onclick="toggleTopBar()">×</button>
</div>

<iframe id="previewFrame"></iframe>

<script>
  const barContainer = document.getElementById('topBarContainer');
  const toggleBtn = document.getElementById('toggleBtn');
  const iframe = document.getElementById('previewFrame');

  function toggleTopBar() {
    const isOpen = barContainer.classList.contains('open');

    if (isOpen) {
      barContainer.classList.remove('open');
      barContainer.classList.add('closed');
      toggleBtn.textContent = '☰';
      iframe.style.height = '100vh';
    } else {
      barContainer.classList.remove('closed');
      barContainer.classList.add('open');
      toggleBtn.textContent = '×';
      iframe.style.height = 'calc(100% - 120px)';
    }
  }

  function normalizeURL(input) {
      let trimmed = input.trim();
      if (!trimmed.includes('.')) {
          return 'https://www.bing.com/search?q=' + encodeURIComponent(trimmed);
      }
      let url = trimmed;
      if (!/^https?:\/\//i.test(url)) {
          url = 'https://' + url;
      }
      try {
          new URL(url);
      } catch(e) {
          alert("Invalid URL.");
          throw e;
      }
      return url;
  }

  function fetchAndInject(inputUrl) {
      let url;

      if (inputUrl) {
          url = inputUrl;
      } else {
          const rawInput = document.getElementById('urlInput').value;
          if (!rawInput) {
              alert("Please enter a valid URL or search term.");
              return;
          }
          try {
              url = normalizeURL(rawInput);
          } catch {
              iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Invalid URL format.</p>`;
              return;
          }
      }

      if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
          iframe.src = url;
          return;
      }

      iframe.src = 'about:blank';
      iframe.contentWindow.document.body.innerHTML = '<p>Loading...</p>';

      const corsProxy = 'https://cors-anywhere.herokuapp.com/';
      const xhr = new XMLHttpRequest();
      xhr.open('GET', corsProxy + url, true);
      xhr.setRequestHeader('Origin', window.location.origin);

      xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status >= 200 && xhr.status < 300) {
                  const originalUrl = url;
                  const parser = new DOMParser();
                  const parsed = parser.parseFromString(xhr.responseText, 'text/html');

                  parsed.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

                  let base = parsed.querySelector('base');
                  if (!base) {
                      base = parsed.createElement('base');
                      base.setAttribute('href', originalUrl);
                      if (parsed.head) {
                          parsed.head.prepend(base);
                      } else {
                          parsed.documentElement.prepend(base);
                      }
                  } else {
                      base.setAttribute('href', originalUrl);
                  }

                  parsed.querySelectorAll('a').forEach(a => {
                      const href = a.getAttribute('href');
                      if (!href) return;

                      if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) {
                          return;
                      }

                      let abs;
                      try {
                          abs = new URL(href, originalUrl).href;
                      } catch (e) {
                          return;
                      }

                      a.setAttribute('data-proxied-href', abs);
                      a.setAttribute('href', 'javascript:void(0)');
                      a.removeAttribute('target');
                      a.removeAttribute('rel');
                  });

                  // Inject helper script to forward link clicks via postMessage
                  const helperScript = parsed.createElement('script');
                  helperScript.textContent = `
                    document.documentElement.addEventListener('click', function(event) {
                      if (event.defaultPrevented) return;
                      if (event.button !== 0) return;
                      if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;

                      let target = event.target;
                      while (target && target !== document.documentElement) {
                        if (target.tagName === 'A' && target.hasAttribute('data-proxied-href')) break;
                        target = target.parentNode;
                      }
                      if (target && target.tagName === 'A' && target.hasAttribute('data-proxied-href')) {
                        event.preventDefault();
                        const href = target.getAttribute('data-proxied-href');
                        window.parent.postMessage({ type: 'proxyLinkClick', href: href }, '*');
                      }
                    }, true);
                  `;
                  if (parsed.head) {
                    parsed.head.appendChild(helperScript);
                  } else if (parsed.body) {
                    parsed.body.appendChild(helperScript);
                  } else {
                    parsed.documentElement.appendChild(helperScript);
                  }

                  const doc = iframe.contentWindow.document;
                  doc.open();
                  doc.write('<!doctype html>\n' + parsed.documentElement.outerHTML);
                  doc.close();

              } else {
                  iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Failed to load: ${xhr.status}</p>`;
              }
          }
      };

      xhr.onerror = function() {
          iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Request failed.</p>`;
      };

      xhr.send();
  }

  function buildProxiedHtmlString(htmlText, originalUrl, corsProxy) {
      const parser = new DOMParser();
      const parsed = parser.parseFromString(htmlText, 'text/html');

      parsed.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

      let base = parsed.querySelector('base');
      if (!base) {
          base = parsed.createElement('base');
          base.setAttribute('href', originalUrl);
          if (parsed.head) {
              parsed.head.prepend(base);
          } else {
              parsed.documentElement.prepend(base);
          }
      } else {
          base.setAttribute('href', originalUrl);
      }

      parsed.querySelectorAll('a').forEach(a => {
          const href = a.getAttribute('href');
          if (!href) return;

          if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) {
              return;
          }

          let abs;
          try {
              abs = new URL(href, originalUrl).href;
          } catch (e) {
              return;
          }

          a.setAttribute('data-proxied-href', abs);
          a.setAttribute('href', 'javascript:void(0)');
          a.removeAttribute('target');
          a.removeAttribute('rel');
      });

      // Inject helper script for link click interception and proxy navigation in new tab
      const helperScript = `
        document.documentElement.addEventListener('click', function(event) {
          if (event.defaultPrevented) return;
          if (event.button !== 0) return;
          if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;

          let target = event.target;
          while (target && target !== document.documentElement) {
            if (target.tagName === 'A' && target.hasAttribute('data-proxied-href')) break;
            target = target.parentNode;
          }
          if (target && target.tagName === 'A' && target.hasAttribute('data-proxied-href')) {
            event.preventDefault();
            const href = target.getAttribute('data-proxied-href');

            if (event.metaKey || event.ctrlKey) {
              const w = window.open('about:blank', '_blank');
              if (!w) {
                alert('Popup blocked. Please allow popups for this site.');
                return;
              }
              loadProxiedIntoWindow(w, href);
            } else {
              loadProxiedIntoWindow(window, href);
            }
          }
        }, true);

        function loadProxiedIntoWindow(targetWindow, url) {
          try {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', '${corsProxy}' + url, true);
            xhr.setRequestHeader('Origin', window.location.origin);
            xhr.onreadystatechange = function() {
              if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status >= 200 && xhr.status < 300) {
                  const parser = new DOMParser();
                  const newDoc = parser.parseFromString(xhr.responseText, 'text/html');

                  // Remove scripts and meta refresh
                  newDoc.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

                  // Ensure base tag
                  let base = newDoc.querySelector('base');
                  if (!base) {
                    base = newDoc.createElement('base');
                    base.setAttribute('href', url);
                    if (newDoc.head) newDoc.head.prepend(base);
                    else newDoc.documentElement.prepend(base);
                  } else {
                    base.setAttribute('href', url);
                  }

                  // Rewrite links again
                  newDoc.querySelectorAll('a').forEach(a => {
                    const href = a.getAttribute('href');
                    if (!href) return;
                    if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) return;

                    let abs;
                    try { abs = new URL(href, url).href; } catch(e) { return; }
                    a.setAttribute('data-proxied-href', abs);
                    a.setAttribute('href', 'javascript:void(0)');
                    a.removeAttribute('target');
                    a.removeAttribute('rel');
                  });

                  // Re-inject this helper script recursively
                  const script = newDoc.createElement('script');
                  script.textContent = \`${helperScript.replace(/`/g, '\\`')}\`;
                  if (newDoc.body) newDoc.body.appendChild(script);
                  else newDoc.documentElement.appendChild(script);

                  targetWindow.document.open();
                  targetWindow.document.write('<!doctype html>' + newDoc.documentElement.outerHTML);
                  targetWindow.document.close();
                } else {
                  targetWindow.document.body.innerHTML = '<p style="color:red;">Failed to load: ' + xhr.status + '</p>';
                }
              }
            };
            xhr.onerror = function() {
              targetWindow.document.body.innerHTML = '<p style="color:red;">Request failed.</p>';
            };
            xhr.send();
          } catch(e) {
            alert('Error loading page: ' + e.message);
          }
        }
      `;

      const scriptElem = parsed.createElement('script');
      scriptElem.textContent = helperScript;
      if (parsed.head) {
          parsed.head.appendChild(scriptElem);
      } else if (parsed.body) {
          parsed.body.appendChild(scriptElem);
      } else {
          parsed.documentElement.appendChild(scriptElem);
      }

      return '<!doctype html>\n' + parsed.documentElement.outerHTML;
  }

  function fetchAndOpenNewTab() {
      const rawInput = document.getElementById('urlInput').value;
      if (!rawInput) {
          alert('Please enter a URL or search term.');
          return;
      }
      let url;
      try {
          url = normalizeURL(rawInput);
      } catch {
          alert("Invalid URL.");
          return;
      }

      if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
          window.open(url, '_blank');
          return;
      }

      const corsProxy = 'https://cors-anywhere.herokuapp.com/';
      fetch(corsProxy + url, { headers: { Origin: window.location.origin } })
        .then(res => {
          if (!res.ok) throw new Error('Network response was not ok ' + res.status);
          return res.text();
        })
        .then(htmlText => {
          const proxiedHTML = buildProxiedHtmlString(htmlText, url, corsProxy);
          const newTab = window.open();
          if (!newTab) {
            alert('Popup blocked! Please allow popups for this site.');
            return;
          }
          newTab.document.open();
          newTab.document.write(proxiedHTML);
          newTab.document.close();
        })
        .catch(err => {
          alert('Failed to load page: ' + err.message);
        });
  }

  window.addEventListener('message', event => {
    if (!event.data || event.data.type !== 'proxyLinkClick') return;
    const href = event.data.href;
    if (href) {
      fetchAndInject(href);
    }
  });

  // Load default or example page on load if you want
  // fetchAndInject('https://example.com');
</script>

</body>
</html>
