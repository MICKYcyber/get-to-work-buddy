<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Proxy HTML Viewer - Inject and Intercept Links</title>
<style>
  :root{
    --bar-height: 120px; /* space used by bar when open (affects iframe calc) */
    --btn-z: 2147483647; /* 32-bit signed integer max */
    --bg: #000;
    --muted: #333;
  }

  html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: Arial, sans-serif;
    background: #111;
    color: #fff;
  }

  /* wrapper for bar + toggle button */
  .top-bar-wrapper {
    width: 100%;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    position: relative;
    pointer-events: none; /* allow iframe clicks through outer area unless controls themselves */
  }

  /* the actual top bar container (collapsible) */
  .top-bar-container {
    width: 100%;
    box-sizing: border-box;
    overflow: hidden;
    max-height: var(--bar-height);
    transition: max-height 0.32s ease, padding 0.32s ease, background-color 0.32s ease;
    background-color: var(--bg);
    padding: 10px;
    border-radius: 4px;
    pointer-events: auto;
  }

  .top-bar-container.closed {
    max-height: 0;
    padding: 0 10px;
    background-color: transparent;
    border-radius: 0;
  }

  .top-bar {
    display:flex;
    gap:10px;
    align-items:center;
  }

  .top-bar input[type="text"] {
    flex:1;
    padding: 8px;
    font-size:14px;
    border-radius:4px;
    border:none;
    outline:none;
  }

  .top-bar button:not(.toggle-bar-button) {
    padding:8px 12px;
    font-size:14px;
    background-color: var(--muted);
    color:white;
    border:none;
    border-radius:4px;
    cursor:pointer;
  }
  .top-bar button:not(.toggle-bar-button):hover { background-color:#555; }

  /* Floating toggle button (always visible) */
  .toggle-bar-button {
    width:40px;
    height:40px;
    border-radius:50%;
    background-color: #000;
    color:white;
    border:2px solid white;
    font-size:24px;
    line-height:1;
    cursor:pointer;
    display:flex;
    justify-content:center;
    align-items:center;
    transition: background-color 0.2s ease, transform 0.12s ease;
    user-select:none;
    margin:10px;
    pointer-events: auto;
    position: fixed;          /* fixed so it stays visible while iframe covers the viewport */
    right: 18px;
    bottom: 18px;
    z-index: var(--btn-z);    /* 32-bit integer z-index you requested */
    box-shadow: 0 6px 18px rgba(0,0,0,0.5);
  }
  .toggle-bar-button:hover { background-color:#111; transform: translateY(-1px); }

  /* The preview iframe:
     - when bar is open: leave room for it (height calc)
     - when bar is closed (class .fullscreen applied via JS): make it fixed and cover the viewport
  */
  #previewFrame {
    width: 100%;
    border: none;
    display: block;
    box-sizing: border-box;
    height: calc(100vh - var(--bar-height)); /* default when bar open */
    transition: height 0.28s ease, top 0.28s ease, left 0.28s ease, width 0.28s ease;
    position: relative;
    z-index: 1;
  }

  /* Fullscreen-like state for the iframe when bar is hidden */
  #previewFrame.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 2; /* below the toggle button (which is var(--btn-z)) */
  }

  /* Keep the top bar visually above iframe when open */
  .top-bar-container.open {
    position: relative;
    z-index: 3;
  }

  /* small responsive tweaks */
  @media (max-width:560px){
    .top-bar input[type="text"]{ font-size:13px; }
    .top-bar button:not(.toggle-bar-button){ padding:7px 9px; font-size:13px; }
  }
</style>
</head>
<body>
  <div class="top-bar-wrapper">
    <!-- Dropdown Bar -->
    <div class="top-bar-container open" id="topBarContainer">
      <div class="top-bar">
        <input type="text" id="urlInput" placeholder="Enter URL or search term" />
        <button onclick="fetchAndInject()">Fetch</button>
        <button onclick="fetchAndOpenNewTab()">Open in New Tab</button>
      </div>
    </div>

    <!-- Toggle Button (always on top) -->
    <button class="toggle-bar-button" id="toggleBtn" aria-pressed="false" title="Toggle Bar" onclick="toggleTopBar()">☰</button>
  </div>

  <iframe id="previewFrame" sandbox="allow-scripts allow-same-origin"></iframe>

<script>
  const barContainer = document.getElementById('topBarContainer');
  const toggleBtn = document.getElementById('toggleBtn');
  const iframe = document.getElementById('previewFrame');

  // initialize state
  function setOpenVisuals(isOpen){
    if(isOpen){
      barContainer.classList.remove('closed');
      barContainer.classList.add('open');
      iframe.classList.remove('fullscreen');
      // keep iframe height responsive (in case CSS var changed)
      iframe.style.height = ''; // let CSS calc handle it
      toggleBtn.textContent = '☰';
      toggleBtn.setAttribute('aria-pressed','false');
    } else {
      barContainer.classList.remove('open');
      barContainer.classList.add('closed');
      iframe.classList.add('fullscreen');
      // ensure iframe takes full viewport even if inline style previously set
      iframe.style.height = '';
      toggleBtn.textContent = '×';
      toggleBtn.setAttribute('aria-pressed','true');
    }
  }

  // toggle behavior triggered by button
  function toggleTopBar(){
    const isOpen = barContainer.classList.contains('open');
    setOpenVisuals(!isOpen);
  }

  // Helper to normalize user input into a URL
  function normalizeURL(input) {
    let trimmed = input.trim();
    if (!trimmed.includes('.')) {
      return 'https://www.bing.com/search?q=' + encodeURIComponent(trimmed);
    }
    let url = trimmed;
    if (!/^https?:\/\//i.test(url)) {
      url = 'https://' + url;
    }
    try {
      new URL(url);
    } catch(e) {
      alert("Invalid URL.");
      throw e;
    }
    return url;
  }

  // fetch the target page through CORS proxy and inject into iframe with interception
  function fetchAndInject(inputUrl){
    let url;
    if (inputUrl){
      url = inputUrl;
    } else {
      const rawInput = document.getElementById('urlInput').value;
      if(!rawInput){ alert("Please enter a valid URL or search term."); return; }
      try { url = normalizeURL(rawInput); } catch { 
        // show an error inside the iframe if possible
        try { iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Invalid URL format.</p>`; } catch {}
        return;
      }
    }

    // quick-pass search engines: allow navigation directly
    if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
      iframe.src = url;
      return;
    }

    // show loading state inside iframe safely
    try {
      iframe.src = 'about:blank';
      iframe.contentWindow.document.open();
      iframe.contentWindow.document.write('<p style="color:#ccc;padding:18px;font-family:Arial">Loading...</p>');
      iframe.contentWindow.document.close();
    } catch(e){ /* ignore cross-origin errors for direct about:blank writes */ }

    // NOTE: public CORS proxies may be rate-limited or unavailable.
    const corsProxy = 'https://cors-anywhere.herokuapp.com/';

    const xhr = new XMLHttpRequest();
    xhr.open('GET', corsProxy + url, true);
    // some proxies may require no Origin header; if they allow it, set it:
    try { xhr.setRequestHeader('Origin', window.location.origin); } catch(e) {}

    xhr.onreadystatechange = function(){
      if (xhr.readyState !== XMLHttpRequest.DONE) return;
      if (xhr.status >= 200 && xhr.status < 300){
        const originalUrl = url;
        const parser = new DOMParser();
        const parsed = parser.parseFromString(xhr.responseText, 'text/html');

        // remove scripts and meta refresh to reduce auto-navigation/security issues
        parsed.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

        // ensure base href is set so relative URLs resolve
        let base = parsed.querySelector('base');
        if (!base) {
          base = parsed.createElement('base');
          base.setAttribute('href', originalUrl);
          if (parsed.head) parsed.head.prepend(base);
          else parsed.documentElement.prepend(base);
        } else {
          base.setAttribute('href', originalUrl);
        }

        // rewrite links to intercept them
        parsed.querySelectorAll('a').forEach(a => {
          const href = a.getAttribute('href');
          if (!href) return;
          if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) return;
          let abs;
          try { abs = new URL(href, originalUrl).href; } catch(e){ return; }
          a.setAttribute('data-proxied-href', abs);
          a.setAttribute('href', 'javascript:void(0)');
          a.removeAttribute('target');
          a.removeAttribute('rel');
        });

        // write transformed html into iframe
        try {
          const doc = iframe.contentWindow.document;
          doc.open();
          doc.write('<!doctype html>\n' + parsed.documentElement.outerHTML);
          doc.close();

          // remove any previous handler
          if (iframe._proxyClickHandler) {
            try {
              doc.documentElement.removeEventListener('click', iframe._proxyClickHandler, true);
            } catch(e){}
          }

          // add click listener to intercept proxied links
          iframe._proxyClickHandler = function(event){
            if (event.defaultPrevented) return;
            if (event.button !== 0) return; // left click only
            if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;
            let target = event.target;
            const docEl = doc.documentElement;
            while (target && target !== docEl){
              if (target.tagName === 'A' && target.hasAttribute('data-proxied-href')) break;
              target = target.parentNode;
            }
            if (target && target.tagName === 'A' && target.hasAttribute('data-proxied-href')){
              event.preventDefault();
              const href = target.getAttribute('data-proxied-href');
              fetchAndInject(href);
            }
          };

          doc.documentElement.addEventListener('click', iframe._proxyClickHandler, true);
        } catch (e){
          // fallback: set iframe src to page URL (may be blocked by CORS)
          try { iframe.src = originalUrl; } catch {}
        }
      } else {
        try {
          iframe.contentWindow.document.body.innerHTML = `<p style="color:red;padding:18px;">Failed to load: ${xhr.status}</p>`;
        } catch(e){}
      }
    };

    xhr.onerror = function(){
      try { iframe.contentWindow.document.body.innerHTML = `<p style="color:red;padding:18px;">Request failed.</p>`; } catch(e){}
    };

    try {
      xhr.send();
    } catch(e){
      try { iframe.contentWindow.document.body.innerHTML = `<p style="color:red;padding:18px;">Request could not be sent.</p>`; } catch(e){}
    }
  }

  // open target in a new tab (fetch content via proxy and write to new window)
  function fetchAndOpenNewTab(){
    const rawInput = document.getElementById('urlInput').value;
    if(!rawInput){ alert("Please enter a valid URL or search term."); return; }
    let url;
    try { url = normalizeURL(rawInput); } catch { alert("Invalid URL format."); return; }

    if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
      window.open(url, '_blank');
      return;
    }

    const newWindow = window.open('about:blank', '_blank');
    if(!newWindow){ alert("Popup blocked. Please allow popups for this site."); return; }
    newWindow.opener = null;
    newWindow.document.write('<p>Loading...</p>');

    const corsProxy = 'https://cors-anywhere.herokuapp.com/';
    const xhr = new XMLHttpRequest();
    xhr.open('GET', corsProxy + url, true);
    try { xhr.setRequestHeader('Origin', window.location.origin); } catch(e){}

    xhr.onreadystatechange = function(){
      if (xhr.readyState !== XMLHttpRequest.DONE) return;
      if (xhr.status >= 200 && xhr.status < 300){
        newWindow.document.open();
        newWindow.document.write(xhr.responseText);
        newWindow.document.close();
      } else {
        newWindow.document.body.innerHTML = `<p style="color:red;padding:18px;">Failed to load: ${xhr.status}</p>`;
      }
    };

    xhr.onerror = function(){
      newWindow.document.body.innerHTML = `<p style="color:red;padding:18px;">Request failed.</p>`;
    };

    try { xhr.send(); } catch(e) { newWindow.document.body.innerHTML = `<p style="color:red;padding:18px;">Request could not be sent.</p>`; }
  }

  // Ensure initial visuals are consistent on load
  setOpenVisuals(true);

  // If user uses keyboard to toggle, support Enter/Space on toggleBtn
  toggleBtn.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      toggleTopBar();
    }
  });

  // Keep visuals correct when resizing (CSS mostly handles it, but clear inline sizes)
  window.addEventListener('resize', () => {
    // If iframe is fullscreen, ensure it keeps correct style (CSS handles it)
    // Remove any stray inline heights to let CSS manage it
    if (barContainer.classList.contains('open')) {
      iframe.style.height = '';
    } else {
      iframe.style.height = '';
    }
  });
</script>
</body>
</html>
