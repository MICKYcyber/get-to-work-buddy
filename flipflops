<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>Proxy HTML Viewer - Inject and Intercept Links</title>
<style>
  html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
  }

  .top-bar-wrapper {
      position: relative;
      width: 100%;
      background-color: transparent;
      padding: 10px;
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
  }

  .top-bar-container {
      overflow: hidden;
      max-height: 200px;
      transition: max-height 0.28s ease-out, padding 0.28s ease-out, background-color 0.28s ease;
      background-color: #000;
      padding: 10px;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
  }

  .top-bar-container.closed {
      max-height: 0;
      padding: 0 10px;
      overflow: hidden;
      background-color: transparent;
      border-radius: 0;
  }

  .top-bar {
      display: flex;
      align-items: center;
      gap: 10px;
  }

  .top-bar input[type="text"] {
      flex: 1;
      padding: 8px;
      font-size: 14px;
      border-radius: 4px;
      border: none;
  }

  .top-bar button:not(.toggle-bar-button) {
      padding: 8px 12px;
      font-size: 14px;
      background-color: #333;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
  }

  .top-bar button:not(.toggle-bar-button):hover {
      background-color: #555;
  }

  .toggle-bar-button {
      position: absolute;
      top: 100%;
      right: 10px;
      margin-top: 5px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background-color: #000;
      color: white;
      border: 2px solid white;
      font-size: 28px;
      line-height: 1;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: background-color 0.3s ease;
      user-select: none;
      z-index: 2147483647;
      box-shadow: 0 0 10px rgba(0,0,0,0.7);
  }

  .toggle-bar-button:hover {
      background-color: #222;
  }

  #previewFrame {
      width: 100%;
      border: none;
      display: block;
      height: calc(100% - 120px);
      transition: height 0.3s ease;
  }

  /* simple small-screen adjustment */
  @media (max-height: 500px) {
    #previewFrame { height: calc(100% - 90px); }
  }
</style>
</head>
<body>

<div class="top-bar-wrapper">
  <div class="top-bar-container open" id="topBarContainer">
    <div class="top-bar">
        <input type="text" id="urlInput" placeholder="Enter URL or search term" />
        <button id="fetchBtn">Fetch</button>
        <button id="openTabBtn">Open in New Tab</button>
    </div>
  </div>

  <button class="toggle-bar-button" id="toggleBtn">×</button>
</div>

<iframe id="previewFrame" src="about:blank" sandbox="allow-scripts allow-same-origin"></iframe>

<script>
  // CONFIG: change to your CORS proxy if needed
  const corsProxy = 'https://cors-anywhere.herokuapp.com/';

  const barContainer = document.getElementById('topBarContainer');
  const toggleBtn = document.getElementById('toggleBtn');
  const iframe = document.getElementById('previewFrame');
  const fetchBtn = document.getElementById('fetchBtn');
  const openTabBtn = document.getElementById('openTabBtn');
  const urlInput = document.getElementById('urlInput');

  toggleBtn.addEventListener('click', toggleTopBar);
  fetchBtn.addEventListener('click', () => fetchAndInject());
  openTabBtn.addEventListener('click', () => fetchAndOpenNewTab());
  window.addEventListener('message', handleIframeMessage, false);

  function toggleTopBar() {
    const isOpen = barContainer.classList.contains('open');

    if (isOpen) {
      barContainer.classList.remove('open');
      barContainer.classList.add('closed');
      toggleBtn.textContent = '☰';
      iframe.style.height = '100vh';
    } else {
      barContainer.classList.remove('closed');
      barContainer.classList.add('open');
      toggleBtn.textContent = '×';
      iframe.style.height = 'calc(100% - 120px)';
    }
  }

  function normalizeURL(input) {
      let trimmed = input.trim();
      if (!trimmed) throw new Error('Empty input');
      // If it doesn't look like a domain (no dot) treat as search
      if (!trimmed.includes('.')) {
          return 'https://www.bing.com/search?q=' + encodeURIComponent(trimmed);
      }
      let url = trimmed;
      if (!/^https?:\/\//i.test(url)) {
          url = 'https://' + url;
      }
      // validate
      new URL(url);
      return url;
  }

  // helper script that will be injected into proxied pages.
  // we build it here and insert the corsProxy string inline so it works inside the iframe
  function makeHelperScript(proxy) {
    // Note: keep this string simple; it performs link interception and fetches proxied pages.
    return `
      (function() {
        const corsProxy = ${JSON.stringify(proxy)};
        function isSkippable(href) {
          return !href || href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:');
        }

        document.documentElement.addEventListener('click', function(event) {
          if (event.defaultPrevented) return;
          if (event.button !== 0) return;
          if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;

          let target = event.target;
          while (target && target !== document.documentElement) {
            if (target.tagName === 'A' && target.hasAttribute('data-proxied-href')) break;
            target = target.parentNode;
          }
          if (target && target.tagName === 'A' && target.hasAttribute('data-proxied-href')) {
            event.preventDefault();
            const href = target.getAttribute('data-proxied-href');

            // If user held ctrl/cmd or middle-click we ask parent to open in new tab
            if (event.metaKey || event.ctrlKey) {
              window.parent.postMessage({ type: 'proxyLinkClickOpenNewTab', href: href }, '*');
            } else {
              window.parent.postMessage({ type: 'proxyLinkClick', href: href }, '*');
            }
          }
        }, true);
      })();
    `;
  }

  // Build proxied HTML content string: rewrites <a>, injects <base> and helper script
  function buildProxiedHtmlString(htmlText, originalUrl, proxy) {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlText, 'text/html');

    // remove script and meta refresh to avoid auto navigation / execution
    doc.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

    // ensure base href points to original URL so relative URLs resolve
    let base = doc.querySelector('base');
    if (!base) {
      base = doc.createElement('base');
      base.setAttribute('href', originalUrl);
      if (doc.head) doc.head.prepend(base);
      else doc.documentElement.prepend(base);
    } else {
      base.setAttribute('href', originalUrl);
    }

    // rewrite anchors
    doc.querySelectorAll('a').forEach(a => {
      const href = a.getAttribute('href');
      if (!href) return;
      if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) return;

      let abs;
      try {
        abs = new URL(href, originalUrl).href;
      } catch (e) {
        return;
      }
      a.setAttribute('data-proxied-href', abs);
      a.setAttribute('href', 'javascript:void(0)');
      a.removeAttribute('target');
      a.removeAttribute('rel');
    });

    // Inject helper script
    const scriptEl = doc.createElement('script');
    scriptEl.textContent = makeHelperScript(proxy);
    if (doc.body) doc.body.appendChild(scriptEl);
    else doc.documentElement.appendChild(scriptEl);

    return '<!doctype html>\n' + doc.documentElement.outerHTML;
  }

  // Load HTML into the iframe (safe because we write about:blank origin)
  function writeHtmlToIframe(html) {
    iframe.src = 'about:blank';
    // Ensure iframe is ready
    iframe.onload = function() {
      try {
        const idoc = iframe.contentWindow.document;
        idoc.open();
        idoc.write(html);
        idoc.close();
      } catch (e) {
        console.error('Error writing to iframe:', e);
      } finally {
        // remove onload handler to avoid repeated calls
        iframe.onload = null;
      }
    };
  }

  async function fetchAndInject(inputUrl) {
    let url;
    try {
      if (inputUrl) {
        url = inputUrl;
      } else {
        const raw = urlInput.value;
        if (!raw) { alert('Please enter a valid URL or search term.'); return; }
        url = normalizeURL(raw);
      }
    } catch (e) {
      alert('Invalid URL or input.');
      return;
    }

    // If search page, just load directly
    if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
      iframe.src = url;
      return;
    }

    // Show loading message
    writeHtmlToIframe('<!doctype html><html><head><meta charset="utf-8"><title>Loading...</title></head><body><p>Loading...</p></body></html>');

    try {
      const res = await fetch(corsProxy + url, { headers: { Origin: window.location.origin } });
      if (!res.ok) throw new Error('Status ' + res.status);
      const htmlText = await res.text();
      const proxied = buildProxiedHtmlString(htmlText, url, corsProxy);
      writeHtmlToIframe(proxied);
    } catch (err) {
      writeHtmlToIframe(`<html><body><p style="color:red;">Failed to load: ${err.message}</p></body></html>`);
      console.error(err);
    }
  }

  // Open proxied content in a new tab (keeps new tab alive by writing a placeholder first)
  async function fetchAndOpenNewTab() {
    const raw = urlInput.value;
    if (!raw) { alert('Please enter a URL or search term.'); return; }

    let url;
    try { url = normalizeURL(raw); } catch (e) { alert('Invalid URL.'); return; }

    if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
      window.open(url, '_blank');
      return;
    }

    const newTab = window.open('', '_blank');
    if (!newTab) { alert('Popup blocked! Please allow popups.'); return; }

    newTab.document.write(`<html><head><meta charset="utf-8"><title>Loading...</title></head><body><p>Loading content...</p></body></html>`);
    newTab.document.close();

    try {
      const res = await fetch(corsProxy + url, { headers: { Origin: window.location.origin } });
      if (!res.ok) throw new Error('Status ' + res.status);
      const htmlText = await res.text();
      const proxied = buildProxiedHtmlString(htmlText, url, corsProxy);
      newTab.document.open();
      newTab.document.write(proxied);
      newTab.document.close();
    } catch (err) {
      newTab.document.body.innerHTML = `<p style="color:red;">Failed to load: ${err.message}</p>`;
    }
  }

  // handle messages from iframe helper script
  function handleIframeMessage(evt) {
    // Basic origin check skipped because iframe content is same-origin (about:blank) after we write it.
    const msg = evt.data;
    if (!msg || !msg.type) return;

    if (msg.type === 'proxyLinkClick' && msg.href) {
      // load clicked link inside iframe (like navigation)
      fetchAndInject(msg.href);
    } else if (msg.type === 'proxyLinkClickOpenNewTab' && msg.href) {
      // open link in new tab proxied
      openProxiedInNewTab(msg.href);
    }
  }

  // helper to open a proxied URL in a new tab
  async function openProxiedInNewTab(url) {
    const newTab = window.open('', '_blank');
    if (!newTab) { alert('Popup blocked!'); return; }
    newTab.document.write(`<html><head><meta charset="utf-8"><title>Loading...</title></head><body><p>Loading content...</p></body></html>`);
    newTab.document.close();

    try {
      const res = await fetch(corsProxy + url, { headers: { Origin: window.location.origin } });
      if (!res.ok) throw new Error('Status ' + res.status);
      const htmlText = await res.text();
      const proxied = buildProxiedHtmlString(htmlText, url, corsProxy);
      newTab.document.open();
      newTab.document.write(proxied);
      newTab.document.close();
    } catch (err) {
      newTab.document.body.innerHTML = `<p style="color:red;">Failed to load: ${err.message}</p>`;
    }
  }

  // optional: press Enter in input to fetch
  urlInput.addEventListener('keydown', function(e) {
    if (e.key === 'Enter') fetchAndInject();
  });
</script>

</body>
</html>
