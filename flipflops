<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Proxy HTML Viewer - Inject and Intercept Links</title>
<style>
  html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
  }

  /* Container: vertical flex, right aligned */
  .top-bar-wrapper {
      width: 100%;
      background-color: transparent; /* no black bar when dropdown closed */
      padding: 10px;
      box-sizing: border-box;

      display: flex;
      flex-direction: column;
      align-items: flex-end; /* align children (bar + button) to right */
  }

  /* Dropdown container */
  .top-bar-container {
      overflow: hidden;
      max-height: 200px; /* visible height */
      transition: max-height 0.3s ease-out, padding 0.3s ease-out, background-color 0.3s ease;
      background-color: #000;
      padding: 10px;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
  }

  /* Hide dropdown */
  .top-bar-container.closed {
      max-height: 0;
      padding: 0 10px;
      overflow: hidden;
      background-color: transparent; /* remove black background */
      border-radius: 0;
  }

  .top-bar {
      display: flex;
      align-items: center;
      gap: 10px;
  }

  .top-bar input[type="text"] {
      flex: 1;
      padding: 8px;
      font-size: 14px;
      border-radius: 4px;
      border: none;
  }

  .top-bar button:not(.toggle-bar-button) {
      padding: 8px 12px;
      font-size: 14px;
      background-color: #333;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
  }

  .top-bar button:not(.toggle-bar-button):hover {
      background-color: #555;
  }

  /* Toggle Button - below dropdown, aligned bottom right */
  .toggle-bar-button {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #000;
      color: white;
      border: 2px solid white;
      font-size: 24px;
      line-height: 1;
      cursor: pointer;

      display: flex;
      justify-content: center;
      align-items: center;
      transition: background-color 0.3s ease;
      user-select: none;

      margin-top: 10px; /* spacing from dropdown bar */
  }

  .toggle-bar-button:hover {
      background-color: #222;
  }

  #previewFrame {
      width: 100%;
      height: calc(100% - 120px); /* Adjust for new height of bar + button */
      border: none;
      display: block;
  }
</style>
</head>
<body>

<div class="top-bar-wrapper">
  <!-- Dropdown Bar -->
  <div class="top-bar-container open" id="topBarContainer">
    <div class="top-bar">
        <input type="text" id="urlInput" placeholder="Enter URL or search term" />
        <button onclick="fetchAndInject()">Fetch</button>
        <button onclick="fetchAndOpenNewTab()">Open in New Tab</button>
    </div>
  </div>

  <!-- Toggle Button BELOW dropdown -->
  <button class="toggle-bar-button" id="toggleBtn" onclick="toggleTopBar()">☰</button>
</div>

<iframe id="previewFrame"></iframe>

<script>
  const barContainer = document.getElementById('topBarContainer');
  const toggleBtn = document.getElementById('toggleBtn');

  function toggleTopBar() {
    const isOpen = barContainer.classList.contains('open');

    if (isOpen) {
      // Close the dropdown: hide container fully
      barContainer.classList.remove('open');
      barContainer.classList.add('closed');
      toggleBtn.textContent = '×';
    } else {
      // Open the dropdown
      barContainer.classList.remove('closed');
      barContainer.classList.add('open');
      toggleBtn.textContent = '☰';
    }
  }

  // Existing functions unchanged:

  function normalizeURL(input) {
      let trimmed = input.trim();
      if (!trimmed.includes('.')) {
          return 'https://www.bing.com/search?q=' + encodeURIComponent(trimmed);
      }
      let url = trimmed;
      if (!/^https?:\/\//i.test(url)) {
          url = 'https://' + url;
      }
      try {
          new URL(url);
      } catch(e) {
          alert("Invalid URL.");
          throw e;
      }
      return url;
  }

  function fetchAndInject(inputUrl) {
      const iframe = document.getElementById('previewFrame');
      let url;

      if (inputUrl) {
          url = inputUrl;
      } else {
          const rawInput = document.getElementById('urlInput').value;
          if (!rawInput) {
              alert("Please enter a valid URL or search term.");
              return;
          }
          try {
              url = normalizeURL(rawInput);
          } catch {
              iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Invalid URL format.</p>`;
              return;
          }
      }

      if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
          iframe.src = url;
          return;
      }

      iframe.src = 'about:blank';
      iframe.contentWindow.document.body.innerHTML = '<p>Loading...</p>';

      const corsProxy = 'https://cors-anywhere.herokuapp.com/';

      const xhr = new XMLHttpRequest();
      xhr.open('GET', corsProxy + url, true);
      xhr.setRequestHeader('Origin', window.location.origin);

      xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status >= 200 && xhr.status < 300) {
                  const originalUrl = url;
                  const parser = new DOMParser();
                  const parsed = parser.parseFromString(xhr.responseText, 'text/html');

                  parsed.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

                  let base = parsed.querySelector('base');
                  if (!base) {
                      base = parsed.createElement('base');
                      base.setAttribute('href', originalUrl);
                      if (parsed.head) {
                          parsed.head.prepend(base);
                      } else {
                          parsed.documentElement.prepend(base);
                      }
                  } else {
                      base.setAttribute('href', originalUrl);
                  }

                  parsed.querySelectorAll('a').forEach(a => {
                      const href = a.getAttribute('href');
                      if (!href) return;

                      if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) {
                          return;
                      }

                      let abs;
                      try {
                          abs = new URL(href, originalUrl).href;
                      } catch (e) {
                          return;
                      }

                      a.setAttribute('data-proxied-href', abs);
                      a.setAttribute('href', 'javascript:void(0)');
                      a.removeAttribute('target');
                      a.removeAttribute('rel');
                  });

                  const doc = iframe.contentWindow.document;
                  doc.open();
                  doc.write('<!doctype html>\n' + parsed.documentElement.outerHTML);
                  doc.close();

                  if (iframe._proxyClickHandler) {
                      try {
                          doc.documentElement.removeEventListener('click', iframe._proxyClickHandler, true);
                      } catch {}
                  }

                  iframe._proxyClickHandler = function(event) {
                      if (event.defaultPrevented) return;
                      if (event.button !== 0) return;
                      if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;

                      let target = event.target;
                      const docEl = doc.documentElement;

                      while (target && target !== docEl) {
                          if (target.tagName === 'A' && target.hasAttribute('data-proxied-href')) break;
                          target = target.parentNode;
                      }

                      if (target && target.tagName === 'A' && target.hasAttribute('data-proxied-href')) {
                          event.preventDefault();
                          const href = target.getAttribute('data-proxied-href');
                          fetchAndInject(href);
                      }
                  };

                  doc.documentElement.addEventListener('click', iframe._proxyClickHandler, true);

              } else {
                  iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Failed to load: ${xhr.status}</p>`;
              }
          }
      };

      xhr.onerror = function() {
          iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Request failed.</p>`;
      };

      xhr.send();
  }

  function fetchAndOpenNewTab() {
      const rawInput = document.getElementById('urlInput').value;

      if (!rawInput) {
          alert("Please enter a valid URL or search term.");
          return;
      }

      let url;
      try {
          url = normalizeURL(rawInput);
      } catch {
          alert("Invalid URL format.");
          return;
      }

      if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
          window.open(url, '_blank');
          return;
      }

      const newWindow = window.open('about:blank', '_blank');
      if (!newWindow) {
          alert("Popup blocked. Please allow popups for this site.");
          return;
      }
      newWindow.opener = null;
      newWindow.document.write('<p>Loading...</p>');

      const corsProxy = 'https://cors-anywhere.herokuapp.com/';

      const xhr = new XMLHttpRequest();
      xhr.open('GET', corsProxy + url, true);
      xhr.setRequestHeader('Origin', window.location.origin);

      xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
              if (xhr.status >= 200 && xhr.status < 300) {
                  newWindow.document.open();
                  newWindow.document.write(xhr.responseText);
                  newWindow.document.close();
              } else {
                  newWindow.document.body.innerHTML = `<p style="color:red;">Failed to load: ${xhr.status}</p>`;
              }
          }
      };

      xhr.onerror = function() {
          newWindow.document.body.innerHTML = `<p style="color:red;">Request failed.</p>`;
      };

      xhr.send();
  }
</script>

</body>
</html>
