<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Proxer</title>
<style>
  html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: Arial, sans-serif;
  }

  .top-bar {
      background-color: #000;
      color: white;
      display: flex;
      align-items: center;
      padding: 10px;
      gap: 10px;
      height: 50px;
  }

  .top-bar input[type="text"] {
      flex: 1;
      padding: 8px;
      font-size: 14px;
  }

  .top-bar button {
      padding: 8px 12px;
      font-size: 14px;
      background-color: #333;
      color: white;
      border: none;
      cursor: pointer;
  }

  .top-bar button:hover {
      background-color: #555;
  }

  #previewFrame {
      width: 100%;
      height: calc(100% - 50px);
      border: none;
  }
</style>
</head>
<body>

<div class="top-bar">
    <input type="text" id="urlInput" placeholder="Enter URL or search term" />
    <button onclick="fetchAndInject()">Fetch</button>
    <button onclick="fetchAndOpenNewTab()">Open in New Tab</button>
</div>

<iframe id="previewFrame"></iframe>

<script>
function normalizeURL(input) {
    let trimmed = input.trim();
    if (!trimmed.includes('.')) {
        return 'https://www.bing.com/search?q=' + encodeURIComponent(trimmed);
    }
    let url = trimmed;
    if (!/^https?:\/\//i.test(url)) {
        url = 'https://' + url;
    }
    try {
        new URL(url);
    } catch(e) {
        alert("Invalid URL.");
        throw e;
    }
    return url;
}

function fetchAndInject(inputUrl) {
    const iframe = document.getElementById('previewFrame');
    let url;

    if (inputUrl) {
        // Called internally with absolute URL
        url = inputUrl;
    } else {
        // Called from input field
        const rawInput = document.getElementById('urlInput').value;
        if (!rawInput) {
            alert("Please enter a valid URL or search term.");
            return;
        }
        try {
            url = normalizeURL(rawInput);
        } catch {
            iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Invalid URL format.</p>`;
            return;
        }
    }

    // For search URLs, load directly (don't proxy)
    if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
        iframe.src = url;
        return;
    }

    iframe.src = 'about:blank';
    iframe.contentWindow.document.body.innerHTML = '<p>Loading...</p>';

    const corsProxy = 'https://cors-anywhere.herokuapp.com/';

    const xhr = new XMLHttpRequest();
    xhr.open('GET', corsProxy + url, true);
    xhr.setRequestHeader('Origin', window.location.origin);

    xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status >= 200 && xhr.status < 300) {
                const originalUrl = url;
                const parser = new DOMParser();
                const parsed = parser.parseFromString(xhr.responseText, 'text/html');

                // Remove scripts and refresh meta tags
                parsed.querySelectorAll('script, meta[http-equiv="refresh"]').forEach(n => n.remove());

                // Ensure a <base> tag for relative URL resolution
                let base = parsed.querySelector('base');
                if (!base) {
                    base = parsed.createElement('base');
                    base.setAttribute('href', originalUrl);
                    if (parsed.head) {
                        parsed.head.prepend(base);
                    } else {
                        parsed.documentElement.prepend(base);
                    }
                } else {
                    base.setAttribute('href', originalUrl);
                }

                // Rewrite all <a> tags to open proxied links in a new tab
                parsed.querySelectorAll('a').forEach(a => {
                    const href = a.getAttribute('href');
                    if (!href) return;

                    if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('javascript:')) {
                        return;
                    }

                    let abs;
                    try {
                        abs = new URL(href, originalUrl).href;
                    } catch (e) {
                        return;
                    }

                    // Store proxied href in data attribute
                    a.setAttribute('data-proxied-href', abs);

                    // Override click to open proxied link in a new tab
                    a.setAttribute('href', 'javascript:void(0)');
                    a.removeAttribute('target');
                    a.removeAttribute('rel');
                });

                // Write sanitized content into iframe
                const doc = iframe.contentWindow.document;
                doc.open();
                doc.write('<!doctype html>\n' + parsed.documentElement.outerHTML);
                doc.close();

                // Remove previous listener if exists
                if (iframe._proxyClickHandler) {
                    try {
                        doc.documentElement.removeEventListener('click', iframe._proxyClickHandler, true);
                    } catch {}
                }

                // Add delegated click listener that opens proxied link in new tab
                iframe._proxyClickHandler = function(event) {
                    if (event.defaultPrevented) return;
                    if (event.button !== 0) return; // left click only
                    if (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;

                    let target = event.target;
                    const docEl = doc.documentElement;

                    while (target && target !== docEl) {
                        if (target.tagName === 'A' && target.hasAttribute('data-proxied-href')) break;
                        target = target.parentNode;
                    }

                    if (target && target.tagName === 'A' && target.hasAttribute('data-proxied-href')) {
                        event.preventDefault();
                        const href = target.getAttribute('data-proxied-href');

                        // Open proxied link in new tab using our fetch proxy format
                        openProxiedInNewTab(href);
                    }
                };

                doc.documentElement.addEventListener('click', iframe._proxyClickHandler, true);

            } else {
                iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Failed to load: ${xhr.status}</p>`;
            }
        }
    };

    xhr.onerror = function() {
        iframe.contentWindow.document.body.innerHTML = `<p style="color:red;">Request failed.</p>`;
    };

    xhr.send();
}

function openProxiedInNewTab(url) {
    // For search URLs, open directly
    if (url.startsWith('https://www.bing.com/search') || url.startsWith('https://duckduckgo.com/?q=')) {
        window.open(url, '_blank');
        return;
    }

    const corsProxy = 'https://cors-anywhere.herokuapp.com/';

    // Open blank window immediately to avoid popup blockers
    const newWindow = window.open('about:blank', '_blank');
    if (!newWindow) {
        alert("Popup blocked. Please allow popups for this site.");
        return;
    }
    newWindow.opener = null;
    newWindow.document.write('<p>Loading...</p>');

    const xhr = new XMLHttpRequest();
    xhr.open('GET', corsProxy + url, true);
    xhr.setRequestHeader('Origin', window.location.origin);

    xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status >= 200 && xhr.status < 300) {
                newWindow.document.open();
                newWindow.document.write(xhr.responseText);
                newWindow.document.close();
            } else {
                newWindow.document.body.innerHTML = `<p style="color:red;">Failed to load: ${xhr.status}</p>`;
            }
        }
    };

    xhr.onerror = function() {
        newWindow.document.body.innerHTML = `<p style="color:red;">Request failed.</p>`;
    };

    xhr.send();
}

function fetchAndOpenNewTab() {
    const rawInput = document.getElementById('urlInput').value;

    if (!rawInput) {
        alert("Please enter a valid URL or search term.");
        return;
    }

    let url;
    try {
        url = normalizeURL(rawInput);
    } catch {
        alert("Invalid URL format.");
        return;
    }

    openProxiedInNewTab(url);
}
</script>

</body>
</html>
